{"ast":null,"code":"import React, { forwardRef, useState } from 'react';\nimport { useMantineTheme } from '@mantine/styles';\nimport useStyles from './Thumb.styles.js';\nimport { Transition } from '../../Transition/Transition.js';\nconst Thumb = forwardRef(({\n  max,\n  min,\n  value,\n  position,\n  label,\n  dragging,\n  onMouseDown,\n  color,\n  classNames,\n  styles,\n  size,\n  labelTransition,\n  labelTransitionDuration,\n  labelTransitionTimingFunction,\n  labelAlwaysOn,\n  thumbLabel,\n  onFocus,\n  onBlur,\n  showLabelOnHover\n}, ref) => {\n  const theme = useMantineTheme();\n  const {\n    classes,\n    cx\n  } = useStyles({\n    color,\n    size\n  }, {\n    classNames,\n    styles,\n    name: \"Slider\"\n  });\n  const [focused, setFocused] = useState(false);\n  const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover;\n  return /* @__PURE__ */React.createElement(\"div\", {\n    tabIndex: 0,\n    role: \"slider\",\n    \"aria-label\": thumbLabel,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref,\n    className: cx(classes.thumb, {\n      [classes.dragging]: dragging\n    }),\n    onFocus: () => {\n      setFocused(true);\n      typeof onFocus === \"function\" && onFocus();\n    },\n    onBlur: () => {\n      setFocused(false);\n      typeof onBlur === \"function\" && onBlur();\n    },\n    onTouchStart: onMouseDown,\n    onMouseDown,\n    onClick: event => event.stopPropagation(),\n    style: {\n      left: `${position}%`\n    }\n  }, /* @__PURE__ */React.createElement(Transition, {\n    mounted: label != null && isVisible,\n    duration: labelTransitionDuration,\n    transition: labelTransition,\n    timingFunction: labelTransitionTimingFunction || theme.transitionTimingFunction\n  }, transitionStyles => /* @__PURE__ */React.createElement(\"div\", {\n    style: transitionStyles,\n    className: classes.label\n  }, label)));\n});\nThumb.displayName = \"@mantine/core/SliderThumb\";\nexport { Thumb };","map":{"version":3,"sources":["../../../../src/components/Slider/Thumb/Thumb.tsx"],"names":[],"mappings":";;;;AAMY,MAAC,KAAK,GAAG,UAAU,CAAC,CAAC;AAC/B,EAAA,GAD+B;AAE/B,EAAA,GAF+B;AAG/B,EAAA,KAH+B;AAI/B,EAAA,QAJ+B;AAK/B,EAAA,KAL+B;AAM/B,EAAA,QAN+B;AAO/B,EAAA,WAP+B;AAQ/B,EAAA,KAR+B;AAS/B,EAAA,UAT+B;AAU/B,EAAA,MAV+B;AAW/B,EAAA,IAX+B;AAY/B,EAAA,eAZ+B;AAa/B,EAAA,uBAb+B;AAc/B,EAAA,6BAd+B;AAe/B,EAAA,aAf+B;AAgB/B,EAAA,UAhB+B;AAiB/B,EAAA,OAjB+B;AAkB/B,EAAA,MAlB+B;AAmB/B,EAAA;AAnB+B,CAAD,EAoB7B,GApB6B,KAoBrB;AACT,QAAM,KAAK,GAAG,eAAe,EAA7B;AACA,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAkB,SAAS,CAAC;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAD,EAAkB;AAAE,IAAA,UAAF;AAAc,IAAA,MAAd;AAAsB,IAAA,IAAI,EAAE;AAA5B,GAAlB,CAAjC;AACA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,SAAS,GAAG,aAAa,IAAI,QAAjB,IAA6B,OAA7B,IAAwC,gBAA1D;AACA,SAAA,eAAuB,KAAK,CAAC,aAAN,CAAoB,KAApB,EAA2B;AAChD,IAAA,QAAQ,EAAE,CADsC;AAEhD,IAAA,IAAI,EAAE,QAF0C;AAGhD,kBAAc,UAHkC;AAIhD,qBAAiB,GAJ+B;AAKhD,qBAAiB,GAL+B;AAMhD,qBAAiB,KAN+B;AAOhD,IAAA,GAPgD;AAQhD,IAAA,SAAS,EAAE,EAAE,CAAC,OAAO,CAAC,KAAT,EAAgB;AAAE,OAAC,OAAO,CAAC,QAAT,GAAoB;AAAtB,KAAhB,CARmC;AAShD,IAAA,OAAO,EAAE,MAAM;AACb,MAAA,UAAU,CAAC,IAAD,CAAV;AACA,aAAO,OAAP,KAAmB,UAAnB,IAAiC,OAAO,EAAxC;AACD,KAZ+C;AAahD,IAAA,MAAM,EAAE,MAAM;AACZ,MAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAO,MAAP,KAAkB,UAAlB,IAAgC,MAAM,EAAtC;AACD,KAhB+C;AAiBhD,IAAA,YAAY,EAAE,WAjBkC;AAkBhD,IAAA,WAlBgD;AAmBhD,IAAA,OAAO,EAAG,KAAD,IAAW,KAAK,CAAC,eAAN,EAnB4B;AAoBhD,IAAA,KAAK,EAAE;AAAE,MAAA,IAAI,EAAG,GAAE,QAAS;AAApB;AApByC,GAA3B,EAqBtB,eAAkB,KAAK,CAAC,aAAN,CAAoB,UAApB,EAAgC;AACjD,IAAA,OAAO,EAAE,KAAK,IAAI,IAAT,IAAiB,SADuB;AAEjD,IAAA,QAAQ,EAAE,uBAFuC;AAGjD,IAAA,UAAU,EAAE,eAHqC;AAIjD,IAAA,cAAc,EAAE,6BAA6B,IAAI,KAAK,CAAC;AAJN,GAAhC,EAKf,gBAAD,IAAiB,eAAqB,KAAK,CAAC,aAAN,CAAoB,KAApB,EAA2B;AAClE,IAAA,KAAK,EAAE,gBAD2D;AAElE,IAAA,SAAS,EAAE,OAAO,CAAC;AAF+C,GAA3B,EAGtC,KAHsC,CALtB,CArBI,CAAvB;AA8BD,CAvD8B,CAAnB;AAwDZ,KAAK,CAAC,WAAN,GAAoB,2BAApB","sourcesContent":["import React, { useState, forwardRef } from 'react';\nimport {\n  useMantineTheme,\n  DefaultProps,\n  MantineNumberSize,\n  MantineColor,\n  ClassNames,\n} from '@mantine/styles';\nimport { Transition, MantineTransition } from '../../Transition';\nimport useStyles from './Thumb.styles';\n\nexport type ThumbStylesNames = ClassNames<typeof useStyles>;\n\ninterface ThumbProps extends DefaultProps<ThumbStylesNames> {\n  max: number;\n  min: number;\n  value: number;\n  position: number;\n  dragging: boolean;\n  color: MantineColor;\n  size: MantineNumberSize;\n  label: React.ReactNode;\n  onMouseDown(event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>): void;\n  labelTransition?: MantineTransition;\n  labelTransitionDuration?: number;\n  labelTransitionTimingFunction?: string;\n  labelAlwaysOn: boolean;\n  thumbLabel: string;\n  onFocus?(): void;\n  onBlur?(): void;\n  showLabelOnHover?: boolean;\n}\n\nexport const Thumb = forwardRef<HTMLDivElement, ThumbProps>(\n  (\n    {\n      max,\n      min,\n      value,\n      position,\n      label,\n      dragging,\n      onMouseDown,\n      color,\n      classNames,\n      styles,\n      size,\n      labelTransition,\n      labelTransitionDuration,\n      labelTransitionTimingFunction,\n      labelAlwaysOn,\n      thumbLabel,\n      onFocus,\n      onBlur,\n      showLabelOnHover,\n    }: ThumbProps,\n    ref\n  ) => {\n    const theme = useMantineTheme();\n    const { classes, cx } = useStyles({ color, size }, { classNames, styles, name: 'Slider' });\n    const [focused, setFocused] = useState(false);\n    const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover;\n\n    return (\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n      <div\n        tabIndex={0}\n        role=\"slider\"\n        aria-label={thumbLabel}\n        aria-valuemax={max}\n        aria-valuemin={min}\n        aria-valuenow={value}\n        ref={ref}\n        className={cx(classes.thumb, { [classes.dragging]: dragging })}\n        onFocus={() => {\n          setFocused(true);\n          typeof onFocus === 'function' && onFocus();\n        }}\n        onBlur={() => {\n          setFocused(false);\n          typeof onBlur === 'function' && onBlur();\n        }}\n        onTouchStart={onMouseDown}\n        onMouseDown={onMouseDown}\n        onClick={(event) => event.stopPropagation()}\n        style={{ left: `${position}%` }}\n      >\n        <Transition\n          mounted={label != null && isVisible}\n          duration={labelTransitionDuration}\n          transition={labelTransition}\n          timingFunction={labelTransitionTimingFunction || theme.transitionTimingFunction}\n        >\n          {(transitionStyles) => (\n            <div style={transitionStyles} className={classes.label}>\n              {label}\n            </div>\n          )}\n        </Transition>\n      </div>\n    );\n  }\n);\n\nThumb.displayName = '@mantine/core/SliderThumb';\n"]},"metadata":{},"sourceType":"module"}