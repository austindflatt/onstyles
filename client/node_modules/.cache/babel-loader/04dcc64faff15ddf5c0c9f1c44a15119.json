{"ast":null,"code":"function getCurves({\n  size,\n  thickness,\n  sections\n}) {\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves = [];\n\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({\n      sum,\n      offset,\n      data: sections[i],\n      root: false\n    });\n    offset -= sections[i].value / 100 * accumulated;\n  }\n\n  curves.push({\n    sum,\n    offset,\n    data: null,\n    root: true\n  });\n  return curves;\n}\n\nexport { getCurves };","map":{"version":3,"sources":["../../../../src/components/RingProgress/get-curves/get-curves.ts"],"names":[],"mappings":"AAAO,SAAS,SAAT,CAAmB;AAAE,EAAA,IAAF;AAAQ,EAAA,SAAR;AAAmB,EAAA;AAAnB,CAAnB,EAAkD;AACvD,QAAM,GAAG,GAAG,QAAQ,CAAC,MAAT,CAAgB,CAAC,GAAD,EAAM,OAAN,KAAkB,GAAG,GAAG,OAAO,CAAC,KAAhD,EAAuD,CAAvD,CAAZ;AACA,QAAM,WAAW,GAAG,IAAI,CAAC,EAAL,IAAW,CAAC,IAAI,GAAG,GAAP,GAAa,SAAS,GAAG,CAA1B,IAA+B,CAA1C,IAA+C,CAAnE;AACA,MAAI,MAAM,GAAG,WAAb;AACA,QAAM,MAAM,GAAG,EAAf;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,IAAI,CAA1C,EAA6C;AAC3C,IAAA,MAAM,CAAC,IAAP,CAAY;AAAE,MAAA,GAAF;AAAO,MAAA,MAAP;AAAe,MAAA,IAAI,EAAE,QAAQ,CAAC,CAAD,CAA7B;AAAkC,MAAA,IAAI,EAAE;AAAxC,KAAZ;AACA,IAAA,MAAM,IAAI,QAAQ,CAAC,CAAD,CAAR,CAAY,KAAZ,GAAoB,GAApB,GAA0B,WAApC;AACD;;AACD,EAAA,MAAM,CAAC,IAAP,CAAY;AAAE,IAAA,GAAF;AAAO,IAAA,MAAP;AAAe,IAAA,IAAI,EAAE,IAArB;AAA2B,IAAA,IAAI,EAAE;AAAjC,GAAZ;AACA,SAAO,MAAP;AACF","sourcesContent":["import type { MantineColor } from '@mantine/styles';\n\ninterface CurveData {\n  value: number;\n  color: MantineColor;\n}\n\ninterface GetCurves {\n  sections: CurveData[];\n  size: number;\n  thickness: number;\n}\n\ninterface Curve {\n  sum: number;\n  offset: number;\n  root: boolean;\n  data: CurveData;\n}\n\nexport function getCurves({ size, thickness, sections }: GetCurves) {\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves: Curve[] = [];\n\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({ sum, offset, data: sections[i], root: false });\n    offset -= (sections[i].value / 100) * accumulated;\n  }\n\n  curves.push({ sum, offset, data: null, root: true });\n\n  return curves;\n}\n"]},"metadata":{},"sourceType":"module"}