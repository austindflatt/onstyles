{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nconst DEFAULT_EVENTS = [\"keypress\", \"mousemove\", \"touchmove\", \"click\", \"scroll\"];\n\nfunction useIdle(timeout, events = DEFAULT_EVENTS) {\n  const [idle, setIdle] = useState(true);\n  const timer = useRef();\n  useEffect(() => {\n    const handleEvents = () => {\n      setIdle(false);\n\n      if (timer.current) {\n        window.clearTimeout(timer.current);\n      }\n\n      timer.current = window.setTimeout(() => {\n        setIdle(true);\n      }, timeout);\n    };\n\n    events.forEach(event => document.addEventListener(event, handleEvents));\n    return () => {\n      events.forEach(event => document.removeEventListener(event, handleEvents));\n    };\n  }, [timeout]);\n  return idle;\n}\n\nexport { useIdle };","map":{"version":3,"sources":["../../src/use-idle/use-idle.ts"],"names":[],"mappings":";AACA,MAAM,cAAc,GAAG,CAAC,UAAD,EAAa,WAAb,EAA0B,WAA1B,EAAuC,OAAvC,EAAgD,QAAhD,CAAvB;;AACO,SAAS,OAAT,CAAiB,OAAjB,EAA0B,MAAM,GAAG,cAAnC,EAAmD;AACxD,QAAM,CAAC,IAAD,EAAO,OAAP,IAAkB,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,KAAK,GAAG,MAAM,EAApB;AACA,EAAA,SAAS,CAAC,MAAM;AACd,UAAM,YAAY,GAAG,MAAM;AACzB,MAAA,OAAO,CAAC,KAAD,CAAP;;AACA,UAAI,KAAK,CAAC,OAAV,EAAmB;AACjB,QAAA,MAAM,CAAC,YAAP,CAAoB,KAAK,CAAC,OAA1B;AACD;;AACD,MAAA,KAAK,CAAC,OAAN,GAAgB,MAAM,CAAC,UAAP,CAAkB,MAAM;AACtC,QAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAFe,EAEb,OAFa,CAAhB;AAGD,KARD;;AASA,IAAA,MAAM,CAAC,OAAP,CAAgB,KAAD,IAAW,QAAQ,CAAC,gBAAT,CAA0B,KAA1B,EAAiC,YAAjC,CAA1B;AACA,WAAO,MAAM;AACX,MAAA,MAAM,CAAC,OAAP,CAAgB,KAAD,IAAW,QAAQ,CAAC,mBAAT,CAA6B,KAA7B,EAAoC,YAApC,CAA1B;AACD,KAFD;AAGD,GAdQ,EAcN,CAAC,OAAD,CAdM,CAAT;AAeA,SAAO,IAAP;AACF","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nconst DEFAULT_EVENTS = ['keypress', 'mousemove', 'touchmove', 'click', 'scroll'];\n\nexport function useIdle(timeout: number, events: string[] = DEFAULT_EVENTS) {\n  const [idle, setIdle] = useState<boolean>(true);\n  const timer = useRef<number>();\n\n  useEffect(() => {\n    const handleEvents = () => {\n      setIdle(false);\n\n      if (timer.current) {\n        window.clearTimeout(timer.current);\n      }\n\n      timer.current = window.setTimeout(() => {\n        setIdle(true);\n      }, timeout);\n    };\n\n    events.forEach((event) => document.addEventListener(event, handleEvents));\n\n    return () => {\n      events.forEach((event) => document.removeEventListener(event, handleEvents));\n    };\n  }, [timeout]);\n\n  return idle;\n}\n"]},"metadata":{},"sourceType":"module"}