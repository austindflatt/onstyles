{"ast":null,"code":"function highlighter(value, highlight) {\n  const shouldHighlight = Array.isArray(highlight) ? highlight.filter(part => part.trim().length > 0).length > 0 : highlight.trim() !== \"\";\n\n  if (!shouldHighlight) {\n    return [{\n      chunk: value,\n      highlighted: false\n    }];\n  }\n\n  const matcher = typeof highlight === \"string\" ? highlight.trim() : highlight.filter(part => part.trim().length !== 0).map(part => part.trim()).join(\"|\");\n  const re = new RegExp(`(${matcher})`, \"gi\");\n  const chunks = value.split(re).map(part => ({\n    chunk: part,\n    highlighted: re.test(part)\n  })).filter(({\n    chunk\n  }) => chunk);\n  return chunks;\n}\n\nexport { highlighter };","map":{"version":3,"sources":["../../../../src/components/Highlight/highlighter/highlighter.ts"],"names":[],"mappings":"AAAO,SAAS,WAAT,CAAqB,KAArB,EAA4B,SAA5B,EAAuC;AAC5C,QAAM,eAAe,GAAG,KAAK,CAAC,OAAN,CAAc,SAAd,IAA2B,SAAS,CAAC,MAAV,CAAkB,IAAD,IAAU,IAAI,CAAC,IAAL,GAAY,MAAZ,GAAqB,CAAhD,EAAmD,MAAnD,GAA4D,CAAvF,GAA2F,SAAS,CAAC,IAAV,OAAqB,EAAxI;;AACA,MAAI,CAAC,eAAL,EAAsB;AACpB,WAAO,CAAC;AAAE,MAAA,KAAK,EAAE,KAAT;AAAgB,MAAA,WAAW,EAAE;AAA7B,KAAD,CAAP;AACD;;AACD,QAAM,OAAO,GAAG,OAAO,SAAP,KAAqB,QAArB,GAAgC,SAAS,CAAC,IAAV,EAAhC,GAAmD,SAAS,CAAC,MAAV,CAAkB,IAAD,IAAU,IAAI,CAAC,IAAL,GAAY,MAAZ,KAAuB,CAAlD,EAAqD,GAArD,CAA0D,IAAD,IAAU,IAAI,CAAC,IAAL,EAAnE,EAAgF,IAAhF,CAAqF,GAArF,CAAnE;AACA,QAAM,EAAE,GAAG,IAAI,MAAJ,CAAY,IAAG,OAAQ,GAAvB,EAA2B,IAA3B,CAAX;AACA,QAAM,MAAM,GAAG,KAAK,CAAC,KAAN,CAAY,EAAZ,EAAgB,GAAhB,CAAqB,IAAD,KAAW;AAAE,IAAA,KAAK,EAAE,IAAT;AAAe,IAAA,WAAW,EAAE,EAAE,CAAC,IAAH,CAAQ,IAAR;AAA5B,GAAX,CAApB,EAA6E,MAA7E,CAAoF,CAAC;AAAE,IAAA;AAAF,GAAD,KAAe,KAAnG,CAAf;AACA,SAAO,MAAP;AACF","sourcesContent":["export function highlighter(value: string, highlight: string | string[]) {\n  const shouldHighlight = Array.isArray(highlight)\n    ? highlight.filter((part) => part.trim().length > 0).length > 0\n    : highlight.trim() !== '';\n\n  if (!shouldHighlight) {\n    return [{ chunk: value, highlighted: false }];\n  }\n\n  const matcher =\n    typeof highlight === 'string'\n      ? highlight.trim()\n      : highlight\n          .filter((part) => part.trim().length !== 0)\n          .map((part) => part.trim())\n          .join('|');\n\n  const re = new RegExp(`(${matcher})`, 'gi');\n  const chunks = value\n    .split(re)\n    .map((part) => ({ chunk: part, highlighted: re.test(part) }))\n    .filter(({ chunk }) => chunk);\n\n  return chunks;\n}\n"]},"metadata":{},"sourceType":"module"}