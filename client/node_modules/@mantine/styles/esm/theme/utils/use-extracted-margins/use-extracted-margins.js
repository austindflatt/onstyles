import { useMantineTheme } from '../../MantineProvider.js';
import { getSizeValue } from '../get-size-value/get-size-value.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
function isValidMargin(margin) {
  return typeof margin === "string" || typeof margin === "number";
}
const margins = {
  m: "margin",
  mt: "marginTop",
  mb: "marginBottom",
  ml: "marginLeft",
  mr: "marginRight"
};
function useExtractedMargins({ others, style }) {
  const theme = useMantineTheme();
  const mergedStyles = __spreadValues({}, style);
  if (isValidMargin(others.my)) {
    const margin = getSizeValue({ size: others.my, sizes: theme.spacing });
    mergedStyles.marginTop = margin;
    mergedStyles.marginBottom = margin;
  }
  if (isValidMargin(others.mx)) {
    const margin = getSizeValue({ size: others.mx, sizes: theme.spacing });
    mergedStyles.marginLeft = margin;
    mergedStyles.marginRight = margin;
  }
  Object.keys(margins).forEach((margin) => {
    if (isValidMargin(others[margin])) {
      mergedStyles[margins[margin]] = getSizeValue({ size: others[margin], sizes: theme.spacing });
    }
  });
  const rest = __spreadValues({}, others);
  delete rest.m;
  delete rest.mx;
  delete rest.my;
  delete rest.mt;
  delete rest.ml;
  delete rest.mb;
  delete rest.mr;
  return { mergedStyles, rest };
}

export { useExtractedMargins };
//# sourceMappingURL=use-extracted-margins.js.map
