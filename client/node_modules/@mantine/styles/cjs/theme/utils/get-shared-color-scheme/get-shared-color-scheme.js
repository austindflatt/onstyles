'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var getThemeColor = require('../get-theme-color/get-theme-color.js');
var hexToRgba = require('../hex-to-rgba/hex-to-rgba.js');

const DEFAULT_GRADIENT = {
  from: "indigo",
  to: "cyan",
  deg: 45
};
function getSharedColorScheme({ color, theme, variant, gradient }) {
  if (variant === "light") {
    return {
      border: "transparent",
      background: hexToRgba.hexToRgba(getThemeColor.getThemeColor({ theme, color, shade: theme.colorScheme === "dark" ? 9 : 0 }), theme.colorScheme === "dark" ? 0.35 : 1),
      color: getThemeColor.getThemeColor({ theme, color, shade: theme.colorScheme === "dark" ? 2 : 9 })
    };
  }
  if (variant === "default") {
    return {
      border: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[4],
      background: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.white,
      color: theme.colorScheme === "dark" ? theme.white : theme.black
    };
  }
  if (variant === "white") {
    return {
      border: "transparent",
      background: theme.white,
      color: getThemeColor.getThemeColor({ theme, color, shade: 7 })
    };
  }
  if (variant === "outline") {
    return {
      border: hexToRgba.hexToRgba(getThemeColor.getThemeColor({ theme, color, shade: theme.colorScheme === "dark" ? 3 : 7 }), 0.65),
      background: "transparent",
      color: getThemeColor.getThemeColor({ theme, color, shade: theme.colorScheme === "dark" ? 3 : 7 })
    };
  }
  if (variant === "gradient") {
    const merged = {
      from: (gradient == null ? void 0 : gradient.from) || DEFAULT_GRADIENT.from,
      to: (gradient == null ? void 0 : gradient.to) || DEFAULT_GRADIENT.to,
      deg: (gradient == null ? void 0 : gradient.deg) || DEFAULT_GRADIENT.deg
    };
    return {
      background: `linear-gradient(${merged.deg}deg, ${getThemeColor.getThemeColor({
        theme,
        color: merged.from,
        shade: 6
      })} 0%, ${getThemeColor.getThemeColor({ theme, color: merged.to, shade: 6 })} 100%)`,
      color: theme.white,
      border: "transparent"
    };
  }
  return {
    border: "transparent",
    background: getThemeColor.getThemeColor({ theme, color, shade: theme.colorScheme === "dark" ? 8 : 6 }),
    color: theme.white
  };
}

exports.getSharedColorScheme = getSharedColorScheme;
//# sourceMappingURL=get-shared-color-scheme.js.map
