'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var styles = require('@mantine/styles');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const sizes = {
  xs: 14,
  sm: 18,
  md: 22,
  lg: 28,
  xl: 34
};
const iconSizes = {
  xs: 8,
  sm: 10,
  md: 14,
  lg: 16,
  xl: 20
};
var useStyles = styles.createStyles((theme, { size, color, transitionDuration }, getRef) => {
  const colors = styles.getSharedColorScheme({ color, theme, variant: "filled" });
  const _size = styles.getSizeValue({ size, sizes });
  const icon = {
    ref: getRef("icon"),
    color: colors.color,
    transform: "translateY(5px) scale(0.5)",
    opacity: 0,
    transitionProperty: "opacity, transform",
    transitionTimingFunction: "ease",
    transitionDuration: `${transitionDuration}ms`,
    pointerEvents: "none",
    width: styles.getSizeValue({ size, sizes: iconSizes }),
    position: "absolute",
    zIndex: 1,
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    margin: "auto",
    "@media (prefers-reduced-motion)": {
      transitionDuration: "0ms"
    }
  };
  return {
    icon,
    root: {
      display: "flex",
      alignItems: "center"
    },
    inner: {
      position: "relative",
      width: _size,
      height: _size
    },
    label: __spreadProps(__spreadValues({}, styles.getFontStyles(theme)), {
      WebkitTapHighlightColor: "transparent",
      paddingLeft: theme.spacing.sm,
      fontSize: styles.getSizeValue({ size, sizes: theme.fontSizes }),
      lineHeight: `${_size}px`,
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black
    }),
    input: __spreadProps(__spreadValues({}, styles.getFocusStyles(theme)), {
      appearance: "none",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.white,
      border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]}`,
      width: _size,
      height: _size,
      borderRadius: theme.radius.sm,
      padding: 0,
      outline: 0,
      display: "block",
      margin: 0,
      transition: `border-color ${transitionDuration}ms ease, background-color ${transitionDuration}ms ease`,
      "&:checked": {
        backgroundColor: colors.background,
        borderColor: colors.background,
        [`& + .${icon.ref}`]: {
          opacity: 1,
          transform: "translateY(0) scale(1)"
        }
      },
      "&:disabled": {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
        borderColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[3],
        cursor: "not-allowed",
        [`& + .${icon.ref}`]: {
          color: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[5]
        }
      }
    })
  };
});

exports.default = useStyles;
exports.sizes = sizes;
//# sourceMappingURL=Checkbox.styles.js.map
