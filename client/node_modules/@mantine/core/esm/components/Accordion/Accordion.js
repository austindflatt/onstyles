import React, { forwardRef } from 'react';
import { useSx, useExtractedMargins } from '@mantine/styles';
import { useUuid } from '@mantine/hooks';
import { AccordionItem } from './AccordionItem/AccordionItem.js';
import { useAccordionState } from './use-accordion-state/use-accordion-state.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Accordion = forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    initialItem = -1,
    initialState,
    state,
    onChange,
    multiple = false,
    disableIconRotation = false,
    transitionDuration = 200,
    iconPosition = "left",
    icon,
    classNames,
    styles,
    style,
    className,
    id,
    sx
  } = _b, others = __objRest(_b, [
    "children",
    "initialItem",
    "initialState",
    "state",
    "onChange",
    "multiple",
    "disableIconRotation",
    "transitionDuration",
    "iconPosition",
    "icon",
    "classNames",
    "styles",
    "style",
    "className",
    "id",
    "sx"
  ]);
  const { sxClassName } = useSx({ sx, className });
  const uuid = useUuid(id);
  const { mergedStyles, rest } = useExtractedMargins({ others, style });
  const items = React.Children.toArray(children).filter((item) => item.type === AccordionItem);
  const [value, onToggle] = useAccordionState({
    multiple,
    items,
    initialItem,
    state,
    initialState,
    onChange
  });
  const controls = items.map((item, index) => /* @__PURE__ */ React.createElement(AccordionItem, __spreadProps(__spreadValues({}, item.props), {
    icon: item.props.icon || icon,
    iconPosition: item.props.iconPosition || iconPosition,
    disableIconRotation,
    key: index,
    transitionDuration,
    opened: value[index],
    onToggle: () => onToggle(index),
    classNames,
    styles,
    id: `${uuid}-${index}`
  })));
  return /* @__PURE__ */ React.createElement("div", __spreadValues({
    style: mergedStyles,
    ref,
    className: sxClassName
  }, rest), controls);
});
Accordion.Item = AccordionItem;
Accordion.displayName = "@mantine/core/Accordion";

export { Accordion };
//# sourceMappingURL=Accordion.js.map
