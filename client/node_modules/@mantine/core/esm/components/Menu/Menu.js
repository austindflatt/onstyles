import React, { forwardRef, useRef, useState, cloneElement } from 'react';
import { useUuid, useUncontrolled, useWindowEvent, useClickOutside, useMergedRef } from '@mantine/hooks';
import { ActionIcon } from '../ActionIcon/ActionIcon.js';
import { Popper } from '../Popper/Popper.js';
import { MenuIcon } from './MenuIcon.js';
import { MenuBody } from './MenuBody/MenuBody.js';
import { MenuItem } from './MenuItem/MenuItem.js';
import { MenuLabel } from './MenuLabel/MenuLabel.js';
import useStyles from './Menu.styles.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const defaultControl = /* @__PURE__ */ React.createElement(ActionIcon, null, /* @__PURE__ */ React.createElement(MenuIcon, null));
const Menu = forwardRef((_a, ref) => {
  var _b = _a, {
    control = defaultControl,
    children,
    onClose,
    onOpen,
    opened,
    style,
    menuId,
    menuBodyProps = {},
    closeOnItemClick = true,
    transitionDuration = 250,
    size = "md",
    shadow = "md",
    position = "bottom",
    placement = "start",
    gutter = 5,
    withArrow = false,
    transition = "pop-top-left",
    transitionTimingFunction,
    menuButtonLabel,
    controlRefProp = "ref",
    trigger = "click",
    radius = "sm",
    delay = 0,
    zIndex = 1,
    classNames,
    styles,
    closeOnScroll = true,
    trapFocus = true,
    onMouseLeave,
    onMouseEnter,
    onChange
  } = _b, others = __objRest(_b, [
    "control",
    "children",
    "onClose",
    "onOpen",
    "opened",
    "style",
    "menuId",
    "menuBodyProps",
    "closeOnItemClick",
    "transitionDuration",
    "size",
    "shadow",
    "position",
    "placement",
    "gutter",
    "withArrow",
    "transition",
    "transitionTimingFunction",
    "menuButtonLabel",
    "controlRefProp",
    "trigger",
    "radius",
    "delay",
    "zIndex",
    "classNames",
    "styles",
    "closeOnScroll",
    "trapFocus",
    "onMouseLeave",
    "onMouseEnter",
    "onChange"
  ]);
  const { classes } = useStyles(null, { classNames, styles, name: "Menu" });
  const delayTimeout = useRef();
  const [referenceElement, setReferenceElement] = useState(null);
  const [wrapperElement, setWrapperElement] = useState(null);
  const [dropdownElement, setDropdownElement] = useState(null);
  const uuid = useUuid(menuId);
  const [_opened, setOpened] = useUncontrolled({
    value: opened,
    defaultValue: false,
    finalValue: false,
    rule: (val) => typeof val === "boolean",
    onChange: (value) => value ? typeof onOpen === "function" && onOpen() : typeof onClose === "function" && onClose()
  });
  const openedRef = useRef(_opened);
  const handleClose = () => {
    if (openedRef.current) {
      openedRef.current = false;
      setOpened(false);
    }
  };
  const handleOpen = () => {
    openedRef.current = true;
    setOpened(true);
  };
  useWindowEvent("scroll", () => closeOnScroll && handleClose());
  useClickOutside(() => _opened && handleClose(), null, [dropdownElement, wrapperElement]);
  const toggleMenu = () => {
    _opened ? handleClose() : handleOpen();
  };
  const controlEventHandlers = trigger === "click" ? { onClick: toggleMenu } : { onMouseEnter: handleOpen, onFocus: handleOpen };
  const handleMouseLeave = (event) => {
    typeof onMouseLeave === "function" && onMouseLeave(event);
    if (trigger === "hover") {
      if (delay > 0) {
        delayTimeout.current = window.setTimeout(() => handleClose(), delay);
      } else {
        handleClose();
      }
    }
  };
  const handleMouseEnter = (event) => {
    typeof onMouseEnter === "function" && onMouseEnter(event);
    window.clearTimeout(delayTimeout.current);
  };
  const menuControl = cloneElement(control, __spreadProps(__spreadValues({}, controlEventHandlers), {
    role: "button",
    "aria-haspopup": "menu",
    "aria-expanded": _opened,
    "aria-controls": uuid,
    "aria-label": menuButtonLabel,
    title: menuButtonLabel,
    [controlRefProp]: useMergedRef(setReferenceElement, ref)
  }));
  return /* @__PURE__ */ React.createElement("div", __spreadValues({
    ref: setWrapperElement,
    style: __spreadValues({ display: "inline-block", position: "relative" }, style),
    onMouseLeave: handleMouseLeave,
    onMouseEnter: handleMouseEnter
  }, others), menuControl, /* @__PURE__ */ React.createElement(Popper, {
    referenceElement,
    transitionDuration,
    transitionTimingFunction,
    transition,
    mounted: _opened,
    position,
    placement,
    gutter,
    withArrow,
    arrowSize: 3,
    zIndex,
    arrowClassName: classes.arrow
  }, /* @__PURE__ */ React.createElement(MenuBody, __spreadProps(__spreadValues({}, menuBodyProps), {
    opened: _opened,
    onClose: handleClose,
    id: uuid,
    closeOnItemClick,
    size,
    shadow,
    classNames,
    styles,
    radius,
    trapFocus: trigger !== "hover" && trapFocus,
    transitionDuration,
    ref: setDropdownElement
  }), children)));
});
Menu.Item = MenuItem;
Menu.Label = MenuLabel;
Menu.displayName = "@mantine/core/Menu";

export { Menu };
//# sourceMappingURL=Menu.js.map
