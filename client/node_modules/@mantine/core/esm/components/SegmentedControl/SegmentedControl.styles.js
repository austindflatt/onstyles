import { createStyles, getSizeValue, getFontStyles, getFocusStyles, getThemeColor } from '@mantine/styles';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const WRAPPER_PADDING = 4;
const sizes = {
  xs: "3px 6px",
  sm: "5px 10px",
  md: "7px 14px",
  lg: "9px 16px",
  xl: "12px 20px"
};
var useStyles = createStyles((theme, {
  fullWidth,
  color,
  radius,
  shouldAnimate,
  transitionDuration,
  transitionTimingFunction,
  size
}, getRef) => {
  const label = __spreadProps(__spreadValues(__spreadValues({
    ref: getRef("label")
  }, getFocusStyles(theme)), getFontStyles(theme)), {
    WebkitTapHighlightColor: "transparent",
    borderRadius: getSizeValue({ size: radius, sizes: theme.radius }),
    fontWeight: 500,
    fontSize: size in theme.fontSizes ? theme.fontSizes[size] : theme.fontSizes.sm,
    cursor: "pointer",
    display: "block",
    textAlign: "center",
    padding: sizes[size in sizes ? size : "sm"],
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    color: theme.colorScheme === "dark" ? theme.colors.dark[1] : theme.colors.gray[7],
    transition: `color ${shouldAnimate ? 0 : transitionDuration}ms ${transitionTimingFunction || theme.transitionTimingFunction}`,
    "&:hover": {
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black
    }
  });
  const control = {
    ref: getRef("control"),
    position: "relative",
    boxSizing: "border-box",
    flex: 1,
    zIndex: 2,
    transition: `border-left-color ${shouldAnimate ? 0 : transitionDuration}ms ${transitionTimingFunction || theme.transitionTimingFunction}`,
    "&:not(:first-of-type)": {
      borderLeft: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`
    }
  };
  return {
    label,
    control,
    input: {
      height: 0,
      width: 0,
      position: "absolute",
      overflow: "hidden",
      whiteSpace: "nowrap",
      opacity: 0,
      "&:focus": {
        outline: "none",
        [`& + .${label.ref}`]: {
          outline: "none",
          boxShadow: `0 0 0 2px ${theme.colorScheme === "dark" ? theme.colors.dark[9] : theme.white}, 0 0 0 4px ${theme.colors[theme.primaryColor][5]}`
        },
        "&:focus:not(:focus-visible)": {
          [`& + .${label.ref}`]: {
            boxShadow: "none"
          }
        }
      }
    },
    root: {
      position: "relative",
      display: fullWidth ? "flex" : "inline-flex",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[8] : theme.colors.gray[1],
      borderRadius: getSizeValue({ size: radius, sizes: theme.radius }),
      overflow: "hidden",
      padding: WRAPPER_PADDING
    },
    controlActive: {
      borderLeftColor: "transparent !important",
      [`& + .${control.ref}`]: {
        borderLeftColor: "transparent !important"
      }
    },
    labelActive: {
      "&, &:hover": {
        color: color in theme.colors || theme.colorScheme === "dark" ? theme.white : theme.black
      }
    },
    active: {
      boxSizing: "border-box",
      borderRadius: getSizeValue({ size: radius, sizes: theme.radius }),
      position: "absolute",
      top: 4,
      bottom: 4,
      zIndex: 1,
      boxShadow: color || theme.colorScheme === "dark" ? "none" : theme.shadows.xs,
      transition: `transform ${shouldAnimate ? 0 : transitionDuration}ms ${theme.transitionTimingFunction}, width ${shouldAnimate ? 0 : transitionDuration / 2}ms ${transitionTimingFunction || theme.transitionTimingFunction}`,
      backgroundColor: color in theme.colors ? getThemeColor({ theme, color, shade: 6 }) : theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.white
    }
  };
});

export default useStyles;
export { WRAPPER_PADDING };
//# sourceMappingURL=SegmentedControl.styles.js.map
