import React from 'react';
import { useSx, useMantineTheme, useExtractedMargins, getSizeValue, getThemeColor } from '@mantine/styles';
import { Bars } from './loaders/Bars.js';
import { Oval } from './loaders/Oval.js';
import { Dots } from './loaders/Dots.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const LOADERS = {
  bars: Bars,
  oval: Oval,
  dots: Dots
};
const LOADER_SIZES = {
  xs: 18,
  sm: 22,
  md: 36,
  lg: 44,
  xl: 58
};
function Loader(_a) {
  var _b = _a, {
    size = "md",
    color,
    className,
    variant,
    style,
    sx
  } = _b, others = __objRest(_b, [
    "size",
    "color",
    "className",
    "variant",
    "style",
    "sx"
  ]);
  const { sxClassName } = useSx({ sx, className });
  const theme = useMantineTheme();
  const { mergedStyles, rest } = useExtractedMargins({ others, style });
  const defaultLoader = variant in LOADERS ? variant : theme.loader;
  const Component = LOADERS[defaultLoader] || LOADERS.bars;
  const _color = color || theme.primaryColor;
  return /* @__PURE__ */ React.createElement(Component, __spreadValues({
    size: getSizeValue({ size, sizes: LOADER_SIZES }),
    style: mergedStyles,
    color: _color in theme.colors ? getThemeColor({ theme, color: _color, shade: theme.colorScheme === "dark" ? 4 : 6 }) : color,
    role: "presentation",
    className: sxClassName
  }, rest));
}
Loader.displayName = "@mantine/core/Loader";

export { LOADER_SIZES, Loader };
//# sourceMappingURL=Loader.js.map
