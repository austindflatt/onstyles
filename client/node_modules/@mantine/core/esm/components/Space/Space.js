import React, { forwardRef } from 'react';
import { useSx, useMantineTheme, useExtractedMargins, getSizeValue } from '@mantine/styles';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Space = forwardRef((_a, ref) => {
  var _b = _a, { w, h, style, sx, className } = _b, others = __objRest(_b, ["w", "h", "style", "sx", "className"]);
  const { sxClassName, css, cx } = useSx({ sx, className });
  const theme = useMantineTheme();
  const { mergedStyles, rest } = useExtractedMargins({ others, style });
  const width = getSizeValue({ size: w, sizes: theme.spacing });
  const height = getSizeValue({ size: h, sizes: theme.spacing });
  return /* @__PURE__ */ React.createElement("div", __spreadValues({
    ref,
    style: mergedStyles,
    className: cx(css({ width, height, minWidth: width, minHeight: height }), sxClassName)
  }, rest));
});
Space.displayName = "@mantine/core/Space";

export { Space };
//# sourceMappingURL=Space.js.map
