import React from 'react';
import { DefaultProps, MantineSize, MantineShadow, ClassNames } from '@mantine/styles';
import { MantineTransition } from '../Transition';
import { DefaultValueStylesNames } from './DefaultValue/DefaultValue';
import { SelectItem, SelectDataItem, BaseSelectProps, BaseSelectStylesNames } from '../Select/types';
import useStyles from './MultiSelect.styles';
export declare type MultiSelectStylesNames = DefaultValueStylesNames | Exclude<ClassNames<typeof useStyles>, 'searchInputEmpty' | 'searchInputInputHidden' | 'searchInputPointer'> | Exclude<BaseSelectStylesNames, 'selected'>;
export interface MultiSelectProps extends DefaultProps<MultiSelectStylesNames>, BaseSelectProps {
    /** Input size */
    size?: MantineSize;
    /** Props passed to root element (InputWrapper component) */
    wrapperProps?: React.ComponentPropsWithoutRef<'div'> & {
        [key: string]: any;
    };
    /** Data for select options */
    data: SelectDataItem[];
    /** Value for controlled component */
    value?: string[];
    /** Default value for uncontrolled component */
    defaultValue?: string[];
    /** Called each time value changes */
    onChange?(value: string[]): void;
    /** Component used to render values */
    valueComponent?: React.FC<any>;
    /** Component used to render item */
    itemComponent?: React.FC<any>;
    /** Dropdown body appear/disappear transition */
    transition?: MantineTransition;
    /** Dropdown body transition duration */
    transitionDuration?: number;
    /** Dropdown body transition timing function, defaults to theme.transitionTimingFunction */
    transitionTimingFunction?: string;
    /** Dropdown shadow from theme or any value to set box-shadow */
    shadow?: MantineShadow;
    /** Maximum dropdown height in px */
    maxDropdownHeight?: number;
    /** Nothing found label */
    nothingFound?: React.ReactNode;
    /** Enable items searching */
    searchable?: boolean;
    /** Function based on which items in dropdown are filtered */
    filter?(value: string, selected: boolean, item: SelectItem): boolean;
    /** Limit amount of items displayed at a time for searchable select */
    limit?: number;
    /** Clear search value when item is selected */
    clearSearchOnChange?: boolean;
    /** Allow to clear item */
    clearable?: boolean;
    /** aria-label for clear button */
    clearButtonLabel?: string;
    /** Clear search field value on blur */
    clearSearchOnBlur?: boolean;
    /** Called each time search query changes */
    onSearchChange?(query: string): void;
    /** Initial dropdown opened state */
    initiallyOpened?: boolean;
    /** Get input ref */
    elementRef?: React.ForwardedRef<HTMLInputElement>;
    /** Allow creatable option  */
    creatable?: boolean;
    /** Function to get create Label */
    getCreateLabel?: (query: string) => React.ReactNode;
    /** Function to determine if create label should be displayed */
    shouldCreate?: (query: string, data: SelectItem[]) => boolean;
    /** Called when create option is selected */
    onCreate?: (query: string) => void;
    /** Change dropdown component, can be used to add custom scrollbars */
    dropdownComponent?: React.FC<any>;
    /** Called when dropdown is opened */
    onDropdownOpen?(): void;
    /** Called when dropdown is closed */
    onDropdownClose?(): void;
}
export declare function defaultFilter(value: string, selected: boolean, item: SelectItem): boolean;
export declare function defaultShouldCreate(query: string, data: SelectItem[]): boolean;
export declare const MultiSelect: React.ForwardRefExoticComponent<MultiSelectProps & React.RefAttributes<HTMLInputElement>>;
//# sourceMappingURL=MultiSelect.d.ts.map