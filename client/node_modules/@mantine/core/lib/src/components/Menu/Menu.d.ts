import React from 'react';
import { DefaultProps, MantineNumberSize, MantineShadow, ClassNames, MantineMargin } from '@mantine/styles';
import { SharedPopperProps } from '../Popper/Popper';
import { MenuBodyStylesNames } from './MenuBody/MenuBody';
import { MenuItemComponent } from './MenuItem/MenuItem';
import { MenuLabelProps } from './MenuLabel/MenuLabel';
import useStyles from './Menu.styles';
export declare type MenuStylesNames = ClassNames<typeof useStyles> | MenuBodyStylesNames;
export interface MenuProps extends Omit<DefaultProps<MenuStylesNames>, MantineMargin>, SharedPopperProps, React.ComponentPropsWithoutRef<'div'> {
    /** <MenuItem /> and <Divider /> components only, children are passed to MenuBody component  */
    children: React.ReactNode;
    /** React element that will be used as menu control */
    control?: React.ReactElement;
    /** Use opened and onClose props to setup controlled menu */
    opened?: boolean;
    /** Called every time menu is closed */
    onClose?(): void;
    /** Called every time menu is opened */
    onOpen?(): void;
    /** Menu button aria-label and title props */
    menuButtonLabel?: string;
    /** MenuBody component props */
    menuBodyProps?: React.ComponentPropsWithoutRef<'div'> & {
        [key: string]: any;
    };
    /** Predefined menu width or number for width in px */
    size?: MantineNumberSize;
    /** Predefined shadow from theme or box-shadow value */
    shadow?: MantineShadow;
    /** Should menu close on item click */
    closeOnItemClick?: boolean;
    /** Id attribute of menu */
    menuId?: string;
    /** Control prop to get element ref */
    controlRefProp?: string;
    /** Menu body z-index */
    zIndex?: number;
    /** Event which should open menu */
    trigger?: 'click' | 'hover';
    /** Close delay for hover trigger */
    delay?: number;
    /** Menu body and items border-radius */
    radius?: MantineNumberSize;
    /** Close menu on scroll */
    closeOnScroll?: boolean;
    /** Trap focus inside menu */
    trapFocus?: boolean;
}
declare type MenuComponent = {
    displayName?: string;
    Item: MenuItemComponent;
    Label: React.FC<MenuLabelProps>;
} & ((props: MenuProps) => React.ReactElement);
export declare const Menu: MenuComponent;
export {};
//# sourceMappingURL=Menu.d.ts.map